rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the resource
    function isOwner() {
      return request.auth.uid == resource.data.userId;
    }
    
    function isValidDate(date) {
      return date is timestamp;
    }
    
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Regras para Google Calendar
      match /googleCalendar/{document=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // Nova regra para pomodoro_sessions como subcoleção
      match /pomodoro_sessions/{sessionId} {
        function isValidPomodoroSession() {
          let incoming = request.resource.data;
          return incoming.type in ['focus', 'shortBreak', 'longBreak']
            && incoming.duration is number
            && (incoming.startedAt is timestamp || incoming.startedAt == null)
            && (incoming.completedAt is timestamp || incoming.completedAt == null)
            && (incoming.settings is map || incoming.settings == null)
            && incoming.userId == userId;  // Garante que o userId corresponde ao documento pai
        }

        allow read: if request.auth != null && request.auth.uid == userId;
        
        allow create: if request.auth != null 
          && request.auth.uid == userId
          && isValidPomodoroSession();
          
        allow update: if request.auth != null 
          && request.auth.uid == userId
          && isValidPomodoroSession();
          
        allow delete: if request.auth != null 
          && request.auth.uid == userId;
      }
    }
    
    match /tasks/{taskId} {
      function isValidTask() {
        let incoming = request.resource.data;
        return incoming.title is string
          && incoming.userId == request.auth.uid
          && (incoming.columnId is string || incoming.columnId == null)
          && (incoming.position is number || incoming.position == null)
          && (incoming.tags == null || incoming.tags is list)
          && (incoming.date == null || incoming.date is timestamp)
          && (incoming.description == null || incoming.description is string)
          && (incoming.priority == null || incoming.priority is string)
          && (incoming.subtasks == null || incoming.subtasks is list)
          && (incoming.location == null || incoming.location is string)
          && (incoming.completed == null || incoming.completed is bool)
          && (incoming.createdAt == null || incoming.createdAt is timestamp)
          && (incoming.updatedAt == null || incoming.updatedAt is timestamp);
      }

      allow read: if request.auth != null && (
        resource == null || resource.data.userId == request.auth.uid
      );
      allow create: if request.auth != null && isValidTask();
      allow update: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null 
        && resource.data.userId == request.auth.uid;
    }
    
    match /subjects/{subjectId} {
      allow read: if request.auth != null && (
        resource == null || resource.data.userId == request.auth.uid
      );
      
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.name is string &&
        request.resource.data.totalHours is number &&
        request.resource.data.hasMultipleTypes is bool;
        
      allow update: if request.auth != null && 
        resource.data.userId == request.auth.uid;
        
      allow delete: if request.auth != null && 
        resource.data.userId == request.auth.uid;
    }
    
    match /settings/{userId} {
      function isValidSettings() {
        let incoming = request.resource.data;
        return incoming.userId is string
          && incoming.theme is string
          && incoming.notifications is bool
          && incoming.pomodoroSettings.focusTime is number
          && incoming.pomodoroSettings.shortBreakTime is number
          && incoming.pomodoroSettings.longBreakTime is number
          && incoming.pomodoroSettings.sessionsUntilLongBreak is number;
      }

      allow read: if request.auth.uid == userId;
      allow write: if request.auth.uid == userId && isValidSettings();
    }
    
    match /notes/{noteId} {
      function isValidNote() {
        let incoming = request.resource.data;
        return incoming.title is string
          && incoming.content is string
          && incoming.topicId is string
          && incoming.userId is string
          && isValidDate(incoming.createdAt)
          && isValidDate(incoming.updatedAt);
      }

      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid
        && isValidNote();
      allow update: if isAuthenticated() 
        && resource.data.userId == request.auth.uid
        && isValidNote();
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    match /topics/{topicId} {
      function isValidTopic() {
        let incoming = request.resource.data;
        return incoming.name is string
          && incoming.userId is string
          && isValidDate(incoming.createdAt);
      }

      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid
        && isValidTopic();
      allow update: if isAuthenticated() 
        && resource.data.userId == request.auth.uid
        && isValidTopic();
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    match /studyTopics/{topicId} {
      function isValidStudyTopic() {
        let incoming = request.resource.data;
        return incoming.title is string
          && incoming.userId == request.auth.uid
          && incoming.progress is number
          && (incoming.topics is list || incoming.topics == null)
          && (incoming.examDate is string || incoming.examDate == null)
          && (incoming.position is number)
          && (incoming.createdAt is string || incoming.createdAt == null)
          && (incoming.updatedAt is string || incoming.updatedAt == null);
      }

      allow read: if isAuthenticated() && (
        resource == null || resource.data.userId == request.auth.uid
      );
      
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid
        && isValidStudyTopic();
      
      allow update: if isAuthenticated() 
        && isOwner()
        && (
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['progress', 'topics', 'updatedAt', 'position'])
          || isValidStudyTopic()
        );
      
      allow delete: if isAuthenticated() && isOwner();
    }
    
    match /tags/{tagId} {
      function isValidTag() {
        let incoming = request.resource.data;
        return incoming.name is string
          && incoming.color is string
          && incoming.userId is string
          && (incoming.createdAt == null || isValidDate(incoming.createdAt));
      }

      allow read: if isAuthenticated() && (
        resource == null || resource.data.userId == request.auth.uid
      );
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid
        && isValidTag();
      allow update: if isAuthenticated() 
        && resource.data.userId == request.auth.uid
        && isValidTag();
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    match /boards/{boardId} {
      function isValidBoard() {
        let incoming = request.resource.data;
        return incoming.title is string
          && incoming.userId is string
          && isValidDate(incoming.createdAt)
          && isValidDate(incoming.updatedAt);
      }

      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid
        && isValidBoard();
      allow update: if isAuthenticated() 
        && resource.data.userId == request.auth.uid
        && isValidBoard();
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    match /columns/{columnId} {
      function isValidColumn() {
        let incoming = request.resource.data;
        return incoming.title is string
          && incoming.userId is string
          && incoming.position is number
          && (incoming.createdAt == null || isValidDate(incoming.createdAt))
          && (incoming.updatedAt == null || isValidDate(incoming.updatedAt));
      }

      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid
        && isValidColumn();
      allow update: if isAuthenticated() 
        && resource.data.userId == request.auth.uid
        && (
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['position', 'updatedAt', 'title'])
          || isValidColumn()
        );
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    match /materiais/{materialId} {
      function isValidMaterial() {
        let incoming = request.resource.data;
        return incoming.title is string
          && incoming.userId == request.auth.uid
          && incoming.materiaId is string
          && incoming.type in ['text', 'file']
          && incoming.anotacoes is number
          && (incoming.content == null || incoming.content is string)
          && (incoming.fileUrl == null || incoming.fileUrl is string)
          && (incoming.publicUrl == null || incoming.publicUrl is string)
          && (incoming.fileType == null || incoming.fileType is string)
          && (incoming.fileSize == null || incoming.fileSize is number)
          && (incoming.createdAt == null || incoming.createdAt is timestamp);
      }

      allow read: if isAuthenticated() && (
        resource == null || resource.data.userId == request.auth.uid
      );
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
    }

    match /materias/{materiaId} {
      function isValidMateria() {
        let incoming = request.resource.data;
        return incoming.nome is string
          && incoming.userId == request.auth.uid
          && (incoming.createdAt == null || incoming.createdAt is timestamp);
      }

      allow read: if isAuthenticated() && (
        resource == null || resource.data.userId == request.auth.uid
      );
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
    }

    match /anotacoes/{materialId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }

    match /decks/{deckId} {
      function isValidDeck() {
        let incoming = request.resource.data;
        return incoming.name is string
          && incoming.userId == request.auth.uid
          && incoming.description is string
          && incoming.createdAt is timestamp
          && incoming.updatedAt is timestamp;
      }

      allow read: if isAuthenticated() && (
        resource == null || resource.data.userId == request.auth.uid
      );
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid
        && isValidDeck();
      allow update: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && (
        resource == null || resource.data.userId == request.auth.uid
      );
    }

    match /flashcards/{flashcardId} {
      function isValidFlashcard() {
        let incoming = request.resource.data;
        return incoming.front is string
          && incoming.back is string
          && incoming.userId == request.auth.uid
          && incoming.deckId is string
          && incoming.repetitionData.interval is number
          && incoming.repetitionData.repetitions is number
          && incoming.repetitionData.easeFactor is number
          && (incoming.repetitionData.nextReview is timestamp)
          && (incoming.repetitionData.lastReview == null || incoming.repetitionData.lastReview is timestamp)
          && (incoming.createdAt is timestamp)
          && (incoming.updatedAt is timestamp);
      }

      allow read: if isAuthenticated() && (
        true
      );
      
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid
        && (
          request.resource.data.front is string
          && request.resource.data.back is string
          && request.resource.data.deckId is string
        );
      
      allow update: if isAuthenticated() 
        && resource.data.userId == request.auth.uid
        && (
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['repetitionData', 'updatedAt'])
          || request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['front', 'back', 'updatedAt'])
          || isValidFlashcard()
        );
      
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
  }
}